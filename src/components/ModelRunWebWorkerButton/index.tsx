import React, {
  FunctionComponent,
  ChangeEvent,
  useState,
  useEffect
} from "react";
import { makeStyles } from "@material-ui/styles";
import Button from "@material-ui/core/Button";
import Slider from "@material-ui/core/Slider";
import Typography from "@material-ui/core/Typography";

import TimeSeriesChart from "../TimeSeriesChart";

const useStyles = makeStyles(theme => ({
  button: {
    margin: 16
  },
  input: {
    display: "none"
  },
  root: {
    width: 300
  },
  slider: {
    padding: "22px 0px"
  }
}));

const tsChart = {
  timeseriesData: [
    68.34769439697266,
    68.16240692138672,
    68.5564956665039,
    68.6324234008789,
    68.6167984008789,
    68.64340209960938,
    68.74014282226562,
    68.88072967529297,
    68.81986999511719,
    68.67053985595703,
    68.8299560546875,
    68.79747009277344,
    68.86030578613281,
    68.87559509277344,
    68.87501525878906,
    68.8902587890625,
    68.85952758789062,
    68.765869140625,
    68.82928466796875,
    68.8296127319336,
    68.75031280517578,
    67.82007598876953,
    67.72970581054688,
    66.66090393066406,
    66.76663208007812,
    66.12837219238281,
    64.84305572509766,
    62.811466217041016,
    63.72530746459961,
    63.13456344604492,
    60.756309509277344,
    58.72603225708008,
    60.89455032348633,
    61.72004318237305,
    62.99797439575195,
    63.82060623168945,
    64.6424331665039,
    65.69158172607422,
    64.59549713134766,
    65.15673828125,
    65.75324249267578,
    65.51685333251953,
    65.62370300292969,
    65.806884765625,
    66.35659790039062,
    65.39458465576172,
    65.62505340576172,
    66.40631866455078,
    66.17276000976562,
    65.07363891601562,
    66.0693359375,
    66.86946105957031,
    66.50131225585938,
    66.78295135498047,
    67.01055145263672,
    66.2475357055664,
    66.78784942626953,
    66.84471893310547,
    66.44750213623047,
    66.71098327636719,
    66.40289306640625,
    66.81713104248047,
    67.33565521240234,
    66.5274887084961,
    66.66877746582031,
    66.21324157714844,
    66.15644073486328,
    65.72576141357422,
    65.67613983154297,
    65.57018280029297,
    65.4020004272461,
    65.82362365722656,
    65.13236999511719,
    64.00209045410156,
    63.71231460571289,
    62.75065994262695,
    62.163700103759766,
    63.955711364746094,
    64.24303436279297,
    63.746925354003906,
    64.36436462402344,
    65.11286163330078,
    64.91860961914062,
    64.13774108886719,
    66.47197723388672,
    66.38575744628906,
    66.26704406738281,
    65.56705474853516,
    66.48665618896484,
    65.51626586914062,
    65.019287109375,
    66.04991149902344,
    66.95462036132812,
    67.50311279296875,
    68.24806213378906,
    68.27581787109375
  ],
  timesteps: [
    "2018-01-31T00:00:00",
    "2018-01-31T00:15:00",
    "2018-01-31T00:30:00",
    "2018-01-31T00:45:00",
    "2018-01-31T01:00:00",
    "2018-01-31T01:15:00",
    "2018-01-31T01:30:00",
    "2018-01-31T01:45:00",
    "2018-01-31T02:00:00",
    "2018-01-31T02:15:00",
    "2018-01-31T02:30:00",
    "2018-01-31T02:45:00",
    "2018-01-31T03:00:00",
    "2018-01-31T03:15:00",
    "2018-01-31T03:30:00",
    "2018-01-31T03:45:00",
    "2018-01-31T04:00:00",
    "2018-01-31T04:15:00",
    "2018-01-31T04:30:00",
    "2018-01-31T04:45:00",
    "2018-01-31T05:00:00",
    "2018-01-31T05:15:00",
    "2018-01-31T05:30:00",
    "2018-01-31T05:45:00",
    "2018-01-31T06:00:00",
    "2018-01-31T06:15:00",
    "2018-01-31T06:30:00",
    "2018-01-31T06:45:00",
    "2018-01-31T07:00:00",
    "2018-01-31T07:15:00",
    "2018-01-31T07:30:00",
    "2018-01-31T07:45:00",
    "2018-01-31T08:00:00",
    "2018-01-31T08:15:00",
    "2018-01-31T08:30:00",
    "2018-01-31T08:45:00",
    "2018-01-31T09:00:00",
    "2018-01-31T09:15:00",
    "2018-01-31T09:30:00",
    "2018-01-31T09:45:00",
    "2018-01-31T10:00:00",
    "2018-01-31T10:15:00",
    "2018-01-31T10:30:00",
    "2018-01-31T10:45:00",
    "2018-01-31T11:00:00",
    "2018-01-31T11:15:00",
    "2018-01-31T11:30:00",
    "2018-01-31T11:45:00",
    "2018-01-31T12:00:00",
    "2018-01-31T12:15:00",
    "2018-01-31T12:30:00",
    "2018-01-31T12:45:00",
    "2018-01-31T13:00:00",
    "2018-01-31T13:15:00",
    "2018-01-31T13:30:00",
    "2018-01-31T13:45:00",
    "2018-01-31T14:00:00",
    "2018-01-31T14:15:00",
    "2018-01-31T14:30:00",
    "2018-01-31T14:45:00",
    "2018-01-31T15:00:00",
    "2018-01-31T15:15:00",
    "2018-01-31T15:30:00",
    "2018-01-31T15:45:00",
    "2018-01-31T16:00:00",
    "2018-01-31T16:15:00",
    "2018-01-31T16:30:00",
    "2018-01-31T16:45:00",
    "2018-01-31T17:00:00",
    "2018-01-31T17:15:00",
    "2018-01-31T17:30:00",
    "2018-01-31T17:45:00",
    "2018-01-31T18:00:00",
    "2018-01-31T18:15:00",
    "2018-01-31T18:30:00",
    "2018-01-31T18:45:00",
    "2018-01-31T19:00:00",
    "2018-01-31T19:15:00",
    "2018-01-31T19:30:00",
    "2018-01-31T19:45:00",
    "2018-01-31T20:00:00",
    "2018-01-31T20:15:00",
    "2018-01-31T20:30:00",
    "2018-01-31T20:45:00",
    "2018-01-31T21:00:00",
    "2018-01-31T21:15:00",
    "2018-01-31T21:30:00",
    "2018-01-31T21:45:00",
    "2018-01-31T22:00:00",
    "2018-01-31T22:15:00",
    "2018-01-31T22:30:00",
    "2018-01-31T22:45:00",
    "2018-01-31T23:00:00",
    "2018-01-31T23:15:00",
    "2018-01-31T23:30:00",
    "2018-01-31T23:45:00"
  ].map(t => new Date(t)),
  currentTimestep: 0
};

interface ModelRunWebWorkerButtonProperties {
  handleModelRerun: (network: number) => void;
}

const ModelRunWebWorkerButton: FunctionComponent<
  ModelRunWebWorkerButtonProperties
> = ({ handleModelRerun }) => {
  const classes = useStyles();
  const [clickCount, setClickCount] = useState(0);
  const [delayValue, setDelayValue] = useState(0);
  const [timeSeriesData, setTimeSeriesData] = useState(tsChart.timeseriesData);
  const [epaNetResults, setEpaNetResults] = useState(tsChart);

  //worker.getResults(setTimeSeriesData)

  //  useEffect(
  //    () => {
  //
  //      console.log(timeSeriesData)
  //      setEpaNetResults({ ...epaNetResults, ...timeSeriesData })
  //
  //      return () => {
  //        //console.log(epaNetEngine)
  //      }
  //    },
  //    [timeSeriesData]
  //  )

  const handleClick = () => {
    handleModelRerun(clickCount);
    setClickCount(clickCount + 1);
  };

  const handleChange = (event: ChangeEvent<{}>, value: number | number[]) => {
    const newValue = value instanceof Array ? value[0] : value;
    setClickCount(newValue);
    handleModelRerun(newValue);
  };

  return (
    <>
      <div className={classes.root}>
        <Typography id="label">Slider label</Typography>
        <Slider
          //classes={{ container: classes.slider }}
          value={clickCount}
          aria-labelledby="label"
          min={0}
          max={1000}
          step={1}
          onChange={handleChange}
        />
      </div>

      <Button
        onClick={handleClick}
        variant="contained"
        color="primary"
        className={classes.button}
      >
        Web Worker - {clickCount}
      </Button>

      <Typography>{delayValue}</Typography>
    </>
  );
};

export default ModelRunWebWorkerButton;
